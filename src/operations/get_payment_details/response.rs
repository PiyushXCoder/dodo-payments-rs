use super::super::common::structs::BillingAddress;
use serde::{Deserialize, Serialize};
use std::collections::HashMap;

#[derive(Debug, Serialize, Deserialize, Clone)]
#[serde_with::skip_serializing_none]
pub struct PaymentResponse {
    pub payment_id: String,
    pub business_id: String,
    pub total_amount: i32,
    pub currency: Currency,
    pub created_at: String, // date-time
    pub disputes: Vec<DisputeResponse>,
    pub refunds: Vec<RefundListItem>,
    pub customer: CustomerLimitedDetailsResponse,
    pub metadata: HashMap<String, String>,
    pub settlement_amount: i32,
    pub settlement_currency: Currency,
    pub billing: BillingAddress,
    pub brand_id: String,
    pub digital_products_delivered: bool,

    pub card_issuing_country: Option<CountryCodeAlpha2>,
    pub card_last_four: Option<String>,
    pub card_network: Option<String>,
    pub card_type: Option<String>,
    pub checkout_session_id: Option<String>,
    pub discount_id: Option<String>,
    pub error_code: Option<String>,
    pub error_message: Option<String>,
    pub payment_link: Option<String>,
    pub payment_method: Option<String>,
    pub payment_method_type: Option<String>,
    pub product_cart: Option<Vec<OneTimeProductCartItemResponse>>,
    pub settlement_tax: Option<i32>,
    pub status: Option<IntentStatus>,
    pub subscription_id: Option<String>,
    pub tax: Option<i32>,
    pub updated_at: Option<String>, // date-time
}

#[derive(Debug, Serialize, Deserialize, Clone)]
pub struct CustomerLimitedDetailsResponse {
    pub customer_id: String,
    pub email: String,
    pub name: String,
}

#[derive(Debug, Serialize, Deserialize, Clone)]
#[serde_with::skip_serializing_none]
pub struct DisputeResponse {
    pub amount: String,
    pub business_id: String,
    pub created_at: String, // date-time
    pub currency: String,   // Should be Currency enum, but OpenAPI says string
    pub dispute_id: String,
    pub dispute_stage: DisputeStage,
    pub dispute_status: DisputeStatus,
    pub payment_id: String,
    pub remarks: Option<String>,
}

#[derive(Debug, Serialize, Deserialize, Clone)]
pub struct OneTimeProductCartItemResponse {
    pub product_id: String,
    pub quantity: i32,
}

#[derive(Debug, Serialize, Deserialize, Clone)]
#[serde_with::skip_serializing_none]
pub struct RefundListItem {
    pub refund_id: String,
    pub payment_id: String,
    pub business_id: String,
    pub status: RefundStatus,
    pub created_at: String, // date-time
    pub is_partial: bool,

    pub amount: Option<i32>,
    pub currency: Option<Currency>,
    pub reason: Option<String>,
}

#[derive(Debug, Serialize, Deserialize, Clone)]
pub enum CountryCodeAlpha2 {
    AF,
    AX,
    AL,
    DZ,
    AS,
    AD,
    AO,
    AI,
    AQ,
    AG,
    AR,
    AM,
    AW,
    AU,
    AT,
    AZ,
    BS,
    BH,
    BD,
    BB,
    BY,
    BE,
    BZ,
    BJ,
    BM,
    BT,
    BO,
    BQ,
    BA,
    BW,
    BV,
    BR,
    IO,
    BN,
    BG,
    BF,
    BI,
    KH,
    CM,
    CA,
    CV,
    KY,
    CF,
    TD,
    CL,
    CN,
    CX,
    CC,
    CO,
    KM,
    CG,
    CD,
    CK,
    CR,
    CI,
    HR,
    CU,
    CW,
    CY,
    CZ,
    DK,
    DJ,
    DM,
    DO,
    EC,
    EG,
    SV,
    GQ,
    ER,
    EE,
    ET,
    FK,
    FO,
    FJ,
    FI,
    FR,
    GF,
    PF,
    TF,
    GA,
    GM,
    GE,
    DE,
    GH,
    GI,
    GR,
    GL,
    GD,
    GP,
    GU,
    GT,
    GG,
    GN,
    GW,
    GY,
    HT,
    HM,
    VA,
    HN,
    HK,
    HU,
    IS,
    IN,
    ID,
    IR,
    IQ,
    IE,
    IM,
    IL,
    IT,
    JM,
    JP,
    JE,
    JO,
    KZ,
    KE,
    KI,
    KP,
    KR,
    KW,
    KG,
    LA,
    LV,
    LB,
    LS,
    LR,
    LY,
    LI,
    LT,
    LU,
    MO,
    MK,
    MG,
    MW,
    MY,
    MV,
    ML,
    MT,
    MH,
    MQ,
    MR,
    MU,
    YT,
    MX,
    FM,
    MD,
    MC,
    MN,
    ME,
    MS,
    MA,
    MZ,
    MM,
    NA,
    NR,
    NP,
    NL,
    NC,
    NZ,
    NI,
    NE,
    NG,
    NU,
    NF,
    MP,
    NO,
    OM,
    PK,
    PW,
    PS,
    PA,
    PG,
    PY,
    PE,
    PH,
    PN,
    PL,
    PT,
    PR,
    QA,
    RE,
    RO,
    RU,
    RW,
    BL,
    SH,
    KN,
    LC,
    MF,
    PM,
    VC,
    WS,
    SM,
    ST,
    SA,
    SN,
    RS,
    SC,
    SL,
    SG,
    SX,
    SK,
    SI,
    SB,
    SO,
    ZA,
    GS,
    SS,
    ES,
    LK,
    SD,
    SR,
    SJ,
    SZ,
    SE,
    CH,
    SY,
    TW,
    TJ,
    TZ,
    TH,
    TL,
    TG,
    TK,
    TO,
    TT,
    TN,
    TR,
    TM,
    TC,
    TV,
    UG,
    UA,
    AE,
    GB,
    UM,
    US,
    UY,
    UZ,
    VU,
    VE,
    VN,
    VG,
    VI,
    WF,
    EH,
    YE,
    ZM,
    ZW,
}

#[derive(Debug, Serialize, Deserialize, Clone)]
pub enum Currency {
    AED,
    ALL,
    AMD,
    ANG,
    AOA,
    ARS,
    AUD,
    AWG,
    AZN,
    BAM,
    BBD,
    BDT,
    BGN,
    BHD,
    BIF,
    BMD,
    BND,
    BOB,
    BRL,
    BSD,
    BWP,
    BYN,
    BZD,
    CAD,
    CHF,
    CLP,
    CNY,
    COP,
    CRC,
    CUP,
    CVE,
    CZK,
    DJF,
    DKK,
    DOP,
    DZD,
    EGP,
    ETB,
    EUR,
    FJD,
    FKP,
    GBP,
    GEL,
    GHS,
    GIP,
    GMD,
    GNF,
    GTQ,
    GYD,
    HKD,
    HNL,
    HRK,
    HTG,
    HUF,
    IDR,
    ILS,
    INR,
    IQD,
    JMD,
    JOD,
    JPY,
    KES,
    KGS,
    KHR,
    KMF,
    KRW,
    KWD,
    KYD,
    KZT,
    LAK,
    LBP,
    LKR,
    LRD,
    LSL,
    LYD,
    MAD,
    MDL,
    MGA,
    MKD,
    MMK,
    MNT,
    MOP,
    MRU,
    MUR,
    MVR,
    MWK,
    MXN,
    MYR,
    MZN,
    NAD,
    NGN,
    NIO,
    NOK,
    NPR,
    NZD,
    OMR,
    PAB,
    PEN,
    PGK,
    PHP,
    PKR,
    PLN,
    PYG,
    QAR,
    RON,
    RSD,
    RUB,
    RWF,
    SAR,
    SBD,
    SCR,
    SEK,
    SGD,
    SHP,
    SLE,
    SLL,
    SOS,
    SRD,
    SSP,
    STN,
    SVC,
    SZL,
    THB,
    TND,
    TOP,
    TRY,
    TTD,
    TWD,
    TZS,
    UAH,
    UGX,
    USD,
    UYU,
    UZS,
    VES,
    VND,
    VUV,
    WST,
    XAF,
    XCD,
    XOF,
    XPF,
    YER,
    ZAR,
    ZMW,
}

#[derive(Debug, Serialize, Deserialize, Clone)]
pub enum DisputeStage {
    #[serde(rename = "pre_dispute")]
    PreDispute,
    #[serde(rename = "dispute")]
    Dispute,
    #[serde(rename = "pre_arbitration")]
    PreArbitration,
}

#[derive(Debug, Serialize, Deserialize, Clone)]
pub enum DisputeStatus {
    #[serde(rename = "dispute_opened")]
    DisputeOpened,
    #[serde(rename = "dispute_expired")]
    DisputeExpired,
    #[serde(rename = "dispute_accepted")]
    DisputeAccepted,
    #[serde(rename = "dispute_cancelled")]
    DisputeCancelled,
    #[serde(rename = "dispute_challenged")]
    DisputeChallenged,
    #[serde(rename = "dispute_won")]
    DisputeWon,
    #[serde(rename = "dispute_lost")]
    DisputeLost,
}

#[derive(Debug, Serialize, Deserialize, Clone)]
pub enum IntentStatus {
    #[serde(rename = "succeeded")]
    Succeeded,
    #[serde(rename = "failed")]
    Failed,
    #[serde(rename = "cancelled")]
    Cancelled,
    #[serde(rename = "processing")]
    Processing,
    #[serde(rename = "requires_customer_action")]
    RequiresCustomerAction,
    #[serde(rename = "requires_merchant_action")]
    RequiresMerchantAction,
    #[serde(rename = "requires_payment_method")]
    RequiresPaymentMethod,
    #[serde(rename = "requires_confirmation")]
    RequiresConfirmation,
    #[serde(rename = "requires_capture")]
    RequiresCapture,
    #[serde(rename = "partially_captured")]
    PartiallyCaptured,
    #[serde(rename = "partially_captured_and_capturable")]
    PartiallyCapturedAndCapturable,
}

#[derive(Debug, Serialize, Deserialize, Clone)]
pub enum RefundStatus {
    #[serde(rename = "succeeded")]
    Succeeded,
    #[serde(rename = "failed")]
    Failed,
    #[serde(rename = "pending")]
    Pending,
    #[serde(rename = "review")]
    Review,
}
